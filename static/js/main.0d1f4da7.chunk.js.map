{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btnText","setBtnText","className","style","id","type","onClick","class","Navbar","props","mode","to","title","aboutText","role","toggleMode","htmlfor","TextForm","text","setText","heading","rows","value","onChange","event","console","log","target","newText","toUpperCase","showAlert","toLowerCase","textCopy","document","getElementById","select","navigator","clipboard","writeText","textToWordsArr","split","join","length","defaultProps","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0d1f4da7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function About() {\r\n  const [myStyle, setMyStyle] = useState({\r\n    color: \"black\",\r\n    backgroundColor: \"white\",\r\n  });\r\n  const [btnText, setBtnText] = useState(\"Enable Dark mode\")\r\n\r\n  const toggleDarkMode = () => {\r\n    if (myStyle.color === \"black\") {\r\n      setMyStyle({\r\n        color: \"white\",\r\n        backgroundColor: \"black\",\r\n      });\r\n      setBtnText(\"Enable Light Mode\")\r\n    }\r\n    else {\r\n      setMyStyle({\r\n        color: \"black\",\r\n        backgroundColor: \"white\",\r\n      });\r\n      setBtnText(\"Enable Dark Mode\")\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\" style={myStyle}>\r\n      <h2 className=\"my-3\">About Us</h2>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container my-5\">\r\n        <button onClick={toggleDarkMode} type=\"button\" class=\"btn btn-primary\">\r\n          {btnText}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n          <div className=\"form-check form-switch\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label className={`form-check-label text-${props.mode === 'light' ? 'dark' : 'light'}`} htmlfor=\"flexSwitchCheckDefault\">\r\n              Enable {props.mode === 'light'?'dark':'light'} Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired, // the isRequired keyword will be used if a prop is to be made necessary(if not passed, will result in an error throw). However, in this case default props are defined.\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About\",\r\n}; // These will be used if no props are passed from app.js\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUPClick = () => {\r\n    //   console.log(\"Uppercase was clicked\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Upper Case\", \"success\");\r\n  };\r\n\r\n  const handleLOClick = () => {\r\n    //   console.log(\"Lowercase was clicked\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lower Case\", \"success\");\r\n  };\r\n\r\n  // const [myFont, setmyFont] = useState({\r\n  //   fontFamily: \"Times New Roman\",\r\n  // });\r\n  // const handleCALClick = () => {\r\n  //   //   console.log(\"Lowercase was clicked\");\r\n  //   if (myFont.fontFamily === \"Times New Roman\") {\r\n  //     setmyFont({\r\n  //       fontFamily: \"Courier\",\r\n  //     });\r\n  //   } else {\r\n  //     setmyFont({\r\n  //       fontFamily: \"Times New Roman\",\r\n  //     });\r\n  //   }\r\n  // };\r\n\r\n  const handleClrClick = () => {\r\n    //   console.log(\"Lowercase was clicked\");\r\n    let newText = \"\";\r\n    setText(newText);\r\n    // setmyFont({\r\n    //   fontFamily: \"Times New Roman\",\r\n    // });\r\n    props.showAlert(\"Text Cleared!\", \"success\");\r\n\r\n  };\r\n\r\n  const handleCopyClick = () => {\r\n    let textCopy = document.getElementById('myBox');\r\n    textCopy.select();\r\n    // textCopy.setSelectionRange(0, 9999);\r\n    navigator.clipboard.writeText(textCopy.value);\r\n    props.showAlert(\"Text Copied!\", \"success\");\r\n\r\n  };\r\n\r\n  const handleRemExtSpacesClick = () => {\r\n    // let textCorrect = document.getElementById('myBox');\r\n    let textToWordsArr = text.split(/[ ]+/);  // Splitting into an array\r\n    setText(textToWordsArr.join(\" \")); // Joining the elements of the array with one space b/w 2 words and setting the text by usnig setText-useState   \r\n    props.showAlert(\"Extra Spaces Removed!\", \"success\");\r\n\r\n  }\r\n\r\n  const handleOnChange = (event) => {\r\n    console.log(\"On Change\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"Enter text here\");\r\n  //   text = \"dsjfvnsj\" // Wrong way to change the state\r\n  //   setText(\"Amazing text\"); // Correct way to change the state\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{backgroundColor: props.mode === 'dark' ? 'black' : 'white', color: props.mode === 'dark' ? 'white' : 'black'}}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUPClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLOClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        {/* <button className=\"btn btn-primary mx-2\" onClick={handleCALClick}>\r\n          Calligraphic Font\r\n        </button> */}\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClrClick}>\r\n          Clear Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleCopyClick}>\r\n          Copy Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleRemExtSpacesClick}>\r\n          Remove Extra Spaces\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {text.split(\" \").length} words, {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} minutes to read</p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n  const lower = word.toLowerCase();\r\n  return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n\r\n  }\r\n  return (\r\n    props.alert && // if props.alert is NOT null, only then the code block next to the double & will be avaluated otherwise NOT\r\n    <div\r\n      className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n      role=\"alert\"\r\n    >\r\n      <strong>{capitalize(props.alert.type)}! </strong>{props.alert.msg}\r\n      {/* <button\r\n        type=\"button\"\r\n        className=\"btn-close\"\r\n        data-bs-dismiss=\"alert\"\r\n        aria-label=\"Close\"\r\n      ></button> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // Whether Dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 3500);\n  };\n\n  const toggleDarkMode = () => {\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    } else {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#212521\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n\n      // setInterval(() => {\n      //   document.title = \"TextUtils is AMAZING\"\n      // }, 1200);\n      // setInterval(() => {\n      //   document.title = \"Install TextUtils NOW!\"\n      // }, 2000);\n    }\n  };\n  return (\n    <>\n      {/* <Navbar title=\"textUtils Blog\" aboutText=\"About textUtils\"/> */}\n      {/* <Navbar/>  If no props are passed then the default props will be used. The default props will be declared in the component JS */}\n      <Router>\n        <Navbar\n          title=\"TextUtils\"\n          mode={mode}\n          toggleMode={toggleDarkMode}\n        />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Routes>\n            <Route exact path=\"/\" element = {\n              <TextForm\n                showAlert={showAlert}\n                heading=\"Enter the text here to analyse below\"\n                mode={mode}\n              />}\n              />\n            <Route exact path=\"about/*\" element={<About/>}/>\n          </Routes>\n\n          {/* <br /> */}\n          {/* <br /> */}\n          {/* <About/> */}\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}