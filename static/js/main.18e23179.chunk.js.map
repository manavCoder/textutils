{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","onClick","toggleMode","htmlfor","TextForm","useState","text","setText","style","color","heading","rows","value","onChange","event","console","log","target","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","textCopy","document","getElementById","select","navigator","clipboard","writeText","textToWordsArr","split","join","length","defaultProps","aboutText","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oMAIe,SAASA,EAAOC,GAC7B,OACE,qBACEC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MADtE,SAGE,sBAAKD,UAAU,kBAAf,UAIE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SACGH,EAAMI,QAET,wBACEH,UAAU,iBACVI,KAAK,SACL,iBAAe,WACf,iBAAe,0BACf,gBAAc,yBACd,gBAAc,QACd,aAAW,oBAPb,SASE,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,oBAAIL,UAAU,kCAAd,SACE,oBAAIA,UAAU,WAAd,SAIE,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAxD,sBAiBJ,sBAAKF,UAAU,yBAAf,UACE,uBACEA,UAAU,mBACVI,KAAK,WACLE,KAAK,SACLD,GAAG,yBACHE,QAASR,EAAMS,aAEjB,wBAAOR,UAAS,gCAA0C,UAAfD,EAAME,KAAmB,OAAS,SAAWQ,QAAQ,yBAAhG,oBACyB,UAAfV,EAAME,KAAiB,OAAO,QADxC,sBCxDG,SAASS,EAASX,GAC/B,IA+DA,EAAwBY,mBAAS,mBAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAIA,OACE,qCACE,sBAAKb,UAAU,YAAYc,MAAO,CAACC,MAAsB,SAAfhB,EAAME,KAAkB,QAAU,SAA5E,UACE,6BAAKF,EAAMiB,UACX,qBAAKhB,UAAU,OAAf,SACE,0BACEA,UAAU,eACVK,GAAG,QACHY,KAAK,IACLC,MAAON,EACPO,SAnBa,SAACC,GACtBC,QAAQC,IAAI,aACZT,EAAQO,EAAMG,OAAOL,QAkBbJ,MAAO,CAACU,gBAAgC,SAAfzB,EAAME,KAAkB,QAAU,QAASc,MAAsB,SAAfhB,EAAME,KAAkB,QAAU,aAGjH,wBAAQD,UAAU,uBAAuBO,QAjFzB,WAEpB,IAAIkB,EAAUb,EAAKc,cACnBb,EAAQY,GACR1B,EAAM4B,UAAU,0BAA2B,YA6EvC,kCAGA,wBAAQ3B,UAAU,uBAAuBO,QA7EzB,WAEpB,IAAIkB,EAAUb,EAAKgB,cACnBf,EAAQY,GACR1B,EAAM4B,UAAU,0BAA2B,YAyEvC,kCAMA,wBAAQ3B,UAAU,uBAAuBO,QA5DxB,WAGrBM,EADc,IAKdd,EAAM4B,UAAU,gBAAiB,YAqD7B,wBAGA,wBAAQ3B,UAAU,uBAAuBO,QApDvB,WACtB,IAAIsB,EAAWC,SAASC,eAAe,SACvCF,EAASG,SAETC,UAAUC,UAAUC,UAAUN,EAASX,OACvCnB,EAAM4B,UAAU,eAAgB,YA+C5B,uBAGA,wBAAQ3B,UAAU,uBAAuBO,QA9Cf,WAE9B,IAAI6B,EAAiBxB,EAAKyB,MAAM,QAChCxB,EAAQuB,EAAeE,KAAK,MAC5BvC,EAAM4B,UAAU,wBAAyB,YA0CrC,oCAIF,sBAAK3B,UAAU,iBAAiBc,MAAO,CAACC,MAAsB,SAAfhB,EAAME,KAAkB,QAAU,SAAjF,UACE,mDACA,8BACGW,EAAKyB,MAAM,KAAKE,OADnB,WACmC3B,EAAK2B,OADxC,iBAGA,8BAAI,KAAQ3B,EAAKyB,MAAM,KAAKE,OAA5B,sBACA,yCACA,4BAAI3B,EAAK2B,OAAO,EAAE3B,EAAK,kEDrC/Bd,EAAO0C,aAAe,CACpBrC,MAAO,iBACPsC,UAAW,SElDEC,MAvBf,SAAe3C,GAMb,OACEA,EAAM4C,OACN,sBACE3C,UAAS,sBAAiBD,EAAM4C,MAAMvC,KAA7B,gCACTE,KAAK,QAFP,UAIE,mCAXe,SAACsC,GACpB,IAAMC,EAAQD,EAAKhB,cACnB,OAAOiB,EAAMC,OAAO,GAAGpB,cAAgBmB,EAAME,MAAM,GAStCC,CAAWjD,EAAM4C,MAAMvC,MAAhC,QAAkDL,EAAM4C,MAAMM,QC2DrDC,MAhEf,WACE,MAAwBvC,mBAAS,SAAjC,mBAAOV,EAAP,KAAakD,EAAb,KACA,EAA0BxC,mBAAS,MAAnC,mBAAOgC,EAAP,KAAcS,EAAd,KAEMzB,EAAY,SAAC0B,EAASjD,GAC1BgD,EAAS,CACPH,IAAKI,EACLjD,KAAMA,IAERkD,YAAW,WACTF,EAAS,QACR,OAuBL,OACE,qCAII,cAACtD,EAAD,CACEK,MAAM,YACNF,KAAMA,EACNO,WA5Be,WACR,SAATP,GACFkD,EAAQ,SACRrB,SAASyB,KAAKzC,MAAMU,gBAAkB,QACtCG,EAAU,8BAA+B,WACzCG,SAAS3B,MAAQ,2BAEjBgD,EAAQ,QACRrB,SAASyB,KAAKzC,MAAMU,gBAAkB,UACtCG,EAAU,6BAA8B,WACxCG,SAAS3B,MAAQ,4BAoBf,cAAC,EAAD,CAAOwC,MAAOA,IACd,qBAAK3C,UAAU,iBAAf,SAGM,cAACU,EAAD,CACEiB,UAAWA,EACXX,QAAQ,uCACRf,KAAMA,UChDPuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrC,SAASC,eAAe,SAM1ByB,K","file":"static/js/main.18e23179.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link> */}\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link> \r\n              <a className=\"nav-link active\" href=\"/about\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n          <div className=\"form-check form-switch\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label className={`form-check-label text-${props.mode === 'light' ? 'dark' : 'light'}`} htmlfor=\"flexSwitchCheckDefault\">\r\n              Enable {props.mode === 'light'?'dark':'light'} Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired, // the isRequired keyword will be used if a prop is to be made necessary(if not passed, will result in an error throw). However, in this case default props are defined.\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About\",\r\n}; // These will be used if no props are passed from app.js\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUPClick = () => {\r\n    //   console.log(\"Uppercase was clicked\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Upper Case\", \"success\");\r\n  };\r\n\r\n  const handleLOClick = () => {\r\n    //   console.log(\"Lowercase was clicked\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lower Case\", \"success\");\r\n  };\r\n\r\n  // const [myFont, setmyFont] = useState({\r\n  //   fontFamily: \"Times New Roman\",\r\n  // });\r\n  // const handleCALClick = () => {\r\n  //   //   console.log(\"Lowercase was clicked\");\r\n  //   if (myFont.fontFamily === \"Times New Roman\") {\r\n  //     setmyFont({\r\n  //       fontFamily: \"Courier\",\r\n  //     });\r\n  //   } else {\r\n  //     setmyFont({\r\n  //       fontFamily: \"Times New Roman\",\r\n  //     });\r\n  //   }\r\n  // };\r\n\r\n  const handleClrClick = () => {\r\n    //   console.log(\"Lowercase was clicked\");\r\n    let newText = \"\";\r\n    setText(newText);\r\n    // setmyFont({\r\n    //   fontFamily: \"Times New Roman\",\r\n    // });\r\n    props.showAlert(\"Text Cleared!\", \"success\");\r\n\r\n  };\r\n\r\n  const handleCopyClick = () => {\r\n    let textCopy = document.getElementById('myBox');\r\n    textCopy.select();\r\n    // textCopy.setSelectionRange(0, 9999);\r\n    navigator.clipboard.writeText(textCopy.value);\r\n    props.showAlert(\"Text Copied!\", \"success\");\r\n\r\n  };\r\n\r\n  const handleRemExtSpacesClick = () => {\r\n    // let textCorrect = document.getElementById('myBox');\r\n    let textToWordsArr = text.split(/[ ]+/);  // Splitting into an array\r\n    setText(textToWordsArr.join(\" \")); // Joining the elements of the array with one space b/w 2 words and setting the text by usnig setText-useState   \r\n    props.showAlert(\"Extra Spaces Removed!\", \"success\");\r\n\r\n  }\r\n\r\n  const handleOnChange = (event) => {\r\n    console.log(\"On Change\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"Enter text here\");\r\n  //   text = \"dsjfvnsj\" // Wrong way to change the state\r\n  //   setText(\"Amazing text\"); // Correct way to change the state\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{backgroundColor: props.mode === 'dark' ? 'black' : 'white', color: props.mode === 'dark' ? 'white' : 'black'}}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUPClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLOClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        {/* <button className=\"btn btn-primary mx-2\" onClick={handleCALClick}>\r\n          Calligraphic Font\r\n        </button> */}\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClrClick}>\r\n          Clear Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleCopyClick}>\r\n          Copy Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleRemExtSpacesClick}>\r\n          Remove Extra Spaces\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {text.split(\" \").length} words, {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} minutes to read</p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n  const lower = word.toLowerCase();\r\n  return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n\r\n  }\r\n  return (\r\n    props.alert && // if props.alert is NOT null, only then the code block next to the double & will be avaluated otherwise NOT\r\n    <div\r\n      className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n      role=\"alert\"\r\n    >\r\n      <strong>{capitalize(props.alert.type)}! </strong>{props.alert.msg}\r\n      {/* <button\r\n        type=\"button\"\r\n        className=\"btn-close\"\r\n        data-bs-dismiss=\"alert\"\r\n        aria-label=\"Close\"\r\n      ></button> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","// import logo from \"./logo.svg\";\nimport \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // Whether Dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 3500);\n  };\n\n  const toggleDarkMode = () => {\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    } else {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#212521\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n\n      // setInterval(() => {\n      //   document.title = \"TextUtils is AMAZING\"\n      // }, 1200);\n      // setInterval(() => {\n      //   document.title = \"Install TextUtils NOW!\"\n      // }, 2000);\n    }\n  };\n  return (\n    <>\n      {/* <Navbar title=\"textUtils Blog\" aboutText=\"About textUtils\"/> */}\n      {/* <Navbar/>  If no props are passed then the default props will be used. The default props will be declared in the component JS */}\n      {/* <Router> */}\n        <Navbar\n          title=\"TextUtils\"\n          mode={mode}\n          toggleMode={toggleDarkMode}\n        />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Routes>\n            <Route exact path=\"/\" element = { */}\n              <TextForm\n                showAlert={showAlert}\n                heading=\"Enter the text here to analyse below\"\n                mode={mode}\n              />\n            {/* }\n              />\n            <Route exact path=\"about/*\" element={<About/>}/>\n          </Routes> */}\n\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}